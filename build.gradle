buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
      jcenter()
    }
  }
  dependencies {
    classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
  }
}

plugins {
  id 'groovy'
  id 'idea'
  id 'com.gradle.plugin-publish' version '1.1.0'
  id 'java-gradle-plugin'
}

apply plugin: 'com.linecorp.gradle.license-git'

defaultTasks 'build'

version = '0.1.0'
group = 'com.linecorp.gradle.license-git'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    maven { url 'https://jitpack.io' }
    mavenCentral()
    google()
}

configurations.implementation.transitive = false

sourceSets.create("integrationTest")

dependencies {
    implementation "com.mycila.xmltool:xmltool:3.3"
    // Using implementation instead of groovy, so that it goes into the pom
    implementation "com.mycila:license-maven-plugin:4.2.rc3"
    implementation "com.mycila:license-maven-plugin-git:4.2.rc3"
    implementation 'commons-io:commons-io:2.11.0'

    implementation gradleApi()

    integrationTestImplementation(project)
    integrationTestImplementation gradleTestKit()
    integrationTestImplementation platform("org.spockframework:spock-bom:2.1-groovy-3.0")
    integrationTestImplementation 'com.netflix.nebula:nebula-test:10.3.0'
    integrationTestImplementation 'org.spockframework:spock-core'
    integrationTestImplementation 'org.spockframework:spock-junit4'
    integrationTestImplementation 'junit:junit:4.13.2'
    integrationTestImplementation 'com.google.guava:guava:31.1-jre'

    testImplementation gradleTestKit()
    testImplementation 'com.netflix.nebula:nebula-test:10.3.0'
    testImplementation platform("org.spockframework:spock-bom:2.1-groovy-3.0")
    testImplementation 'org.spockframework:spock-core'
    testImplementation 'org.spockframework:spock-junit4'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.guava:guava:31.1-jre'
}

// TODO: Extract this files to it module.
def integrationTestTask = tasks.register("integrationTest", Test) {
    description = 'Runs the integration tests.'
    group = "verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter(tasks.named('test'))
    useJUnitPlatform()
}

tasks.named('check') {
    it.dependsOn(integrationTestTask)
}

// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc).configureEach {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

tasks.register("sourcesJar", Jar.class) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

tasks.register("javadocJar", Jar.class) {
    dependsOn = tasks.withType(Javadoc)
    classifier = 'javadoc'
    from javadoc.destinationDir
}

license {
    ignoreFailures true
}

tasks.withType(Test).configureEach { t ->
  t.afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

gradlePlugin {
    website = "https://github.com/line/license-gradle-plugin"
    vcsUrl = "https://github.com/line/license-gradle-plugin.git"
    plugins {
        licensePlugin {
            id = "com.linecorp.gradle.license-git"
            implementationClass = "nl.javadude.gradle.plugins.license.LicensePlugin"
            displayName = "License plugin for Gradle"
            description = "Applies a header to files, typically a license"
            tags.set(["gradle", "plugin", "license"])
        }
    }
}
